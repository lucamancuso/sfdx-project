#!groovy
import groovy.json.JsonSlurperClassic
node {
    def SF_CONSUMER_KEY=env.SF_CONSUMER_KEY
    def SF_USERNAME=env.SF_USERNAME
    def SERVER_KEY_CREDENTALS_ID=env.SERVER_KEY_CREDENTALS_ID
    def TEST_LEVEL='RunLocalTests'
    def PACKAGE_NAME='0Ho1U000000CaUzSAK'
    def PACKAGE_VERSION
    def SF_INSTANCE_URL = env.SF_INSTANCE_URL

    def toolbelt = tool 'toolbelt'
    

    println 'KEY IS' 
    println SERVER_KEY_CREDENTALS_ID
    println SF_CONSUMER_KEY
    println SF_INSTANCE_URL
    
    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

    stage('checkout source') {
        checkout scm
    }

    
    
    // -------------------------------------------------------------------------
    // Run all the enclosed stages with access to the Salesforce
    // JWT key credentials.
    // -------------------------------------------------------------------------
withEnv(["HOME=${env.WORKSPACE}"]) 
	{     
		withCredentials([file(credentialsId: SERVER_KEY_CREDENTALS_ID, variable: 'server_key_file')]) {

			    // -------------------------------------------------------------------------
			    // Authorize the Dev Hub org with JWT key and give it an alias.
			    // -------------------------------------------------------------------------

			stage('Authorize DevHub') 
				{
				if (isUnix()) {
				rc = sh returnStatus: true, script: "${toolbelt}sfdx force:auth:jwt:grant --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile ${server_key_file} --setdefaultdevhubusername --instanceurl ${SF_INSTANCE_URL} --setalias HubOrg"
				}else{
				 rc = bat returnStatus: true, script: "\"${toolbelt}\"sfdx force:auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile ${server_key_file} --setdefaultdevhubusername --setalias HubOrg"
				}
				if (rc != 0) 
				{ 
				error 'hub org authorization failed' 
				}
			}
					println rc
			stage('List Org'){
				rc = bat returnStatus: true, script: "\"${toolbelt}\"sfdx force:org:list"
				if (rc != 0) 
				{ 
				error 'list failed' 
				}			
			}
			stage('Create Test Scratch Org') {				
				if (isUnix()) {
				rc = sh returnStatus: true, script: "${toolbelt}force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias ciorg --wait 10 --durationdays 1"
				}else{
				rc = bat returnStatus: true, script: "\"${toolbelt}\"sfdx force:org:create --targetdevhubusername HubOrg --setdefaultusername --definitionfile config/project-scratch-def.json --setalias ciorg --wait 10 --durationdays 1"
				}
				if (rc != 0) {
				error 'Salesforce test scratch org creation failed.'
				}
			}



				/*

				rc = command "${toolbelt}/sfdx auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile ${server_key_file} --setdefaultdevhubusername --setalias HubOrg"
				if (rc != 0) {
				    error 'Salesforce dev hub org authorization failed.'
				}
				*/
		}
	}
}
